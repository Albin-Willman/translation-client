'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.run = run;
exports.table = table;
exports.styleguideEntryPoint = styleguideEntryPoint;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var styleguide = require('./styleguide');

function run(cwd, cfg) {
    if (!cfg.proxyIsEnabled || styleguide.isActive()) {
        return;
    }

    var app = (0, _express2.default)();
    app.use(_bodyParser2.default.json());

    // list here the apis you plan to use
    _fs2.default.readdirSync(_path2.default.join(cwd, 'app', 'server')).filter(function (i) {
        return i.substr(0, 1) !== '.';
    }).filter(function (i) {
        return i.substr(0, 1) !== '_';
    }).forEach(function (api) {
        var apiPath = _path2.default.join(cwd, './app/server/' + api);
        app.use('/' + api.replace('.js', ''), require(apiPath));
    });

    app.listen(cfg.proxyPort, function () {
        console.log('Fake API /dist available at http://%s:%s', cfg.proxyHost, cfg.proxyPort);
    });
}

function table(serverCfg) {
    var table = {
        '/': styleguideEntryPoint(serverCfg),
        '/index.html': styleguideEntryPoint(serverCfg)
    };

    serverCfg.proxyUrls.forEach(function (url) {
        table[url] = 'http://' + serverCfg.proxyHost + ':' + serverCfg.proxyPort + '/';
    });

    Object.keys(serverCfg.proxyRules).forEach(function (key) {
        table[key] = serverCfg.proxyRules[key];
    });

    return table;
}

function styleguideEntryPoint(serverCfg) {
    var _serverCfg$guideEntry = serverCfg.guideEntryPoint;
    var guideEntryPoint = _serverCfg$guideEntry === undefined ? '/config/guide.html' : _serverCfg$guideEntry;
    var _serverCfg$clientEntr = serverCfg.clientEntryPoint;
    var clientEntryPoint = _serverCfg$clientEntr === undefined ? '/config/client.html' : _serverCfg$clientEntr;


    return {
        bypass: function bypass() {
            return styleguide.isActive() ? guideEntryPoint : clientEntryPoint;
        }
    };
}