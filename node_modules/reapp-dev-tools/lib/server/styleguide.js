'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.init = init;
exports.addComponent = addComponent;
exports.addComponents = addComponents;
exports.getInfo = getInfo;
exports.isActive = isActive;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _getGuideSourceCode = require('./get-guide-source-code');

var _getGuideSourceCode2 = _interopRequireDefault(_getGuideSourceCode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /* eslint no-empty:0 */

var cwd = '';
var components = [];
var sources = [];

function init(_cwd, _args) {
    var args = [].concat(_toConsumableArray(_args));
    cwd = _cwd;

    if (args.length > 2) {
        var arg = args.pop();
        if (arg === 'styleguide' || arg === 'guide') {
            addComponents();
        } else {
            addComponent(arg);
        }
    }
}

function addComponent(name) {

    var plugin;
    if (name.indexOf('/') !== -1) {
        name = name.split('/');
        plugin = name[0];
        name = name[1];
    }

    var fileName = name + '.js';
    var guideFile = name + '.guide.js';

    var guidePath;
    if (plugin) {
        guidePath = _path2.default.join(cwd, 'app', 'plugins', plugin, 'styleguide', guideFile);
    } else {
        guidePath = _path2.default.join(cwd, 'app', 'styleguide', guideFile);
    }

    var component = {
        plugin: plugin,
        name: name,
        fileName: fileName,
        guideFile: guideFile,
        guidePath: guidePath
    };

    try {
        sources.push((0, _getGuideSourceCode2.default)(guidePath));
    } catch (e) {}

    components.push(component);
    return component;
}

function addComponents() {
    var componentsPath = _path2.default.join(cwd, 'app', 'styleguide');
    _fs2.default.readdirSync(componentsPath).filter(isGuideComponent).map(getComponentName).map(addComponent);
}

function getInfo() {
    return {
        components: components,
        sources: sources,
        cwd: cwd
    };
}

function isActive() {
    return components.length > 0;
}

function isGuideComponent(fileName) {
    return fileName.indexOf('.guide') !== -1;
}

function getComponentName(fileName) {
    return fileName.replace('.guide.js', '');
}