'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StyleguideSource = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('react-bootstrap/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Alert = require('react-bootstrap/lib/Alert');

var _Alert2 = _interopRequireDefault(_Alert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StyleguideSource = exports.StyleguideSource = (_temp2 = _class = function (_React$Component) {
    _inherits(StyleguideSource, _React$Component);

    function StyleguideSource() {
        var _Object$getPrototypeO;

        var _temp, _this, _ret;

        _classCallCheck(this, StyleguideSource);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(StyleguideSource)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = {
            isOpen: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(StyleguideSource, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var content = null;
            if (this.state.isOpen) {
                var lines = this.props.lines.map(function (line, i) {
                    return _react2.default.createElement(
                        'span',
                        { key: i },
                        line,
                        _react2.default.createElement('br', null)
                    );
                });
                content = _react2.default.createElement(
                    _Alert2.default,
                    {
                        bsStyle: 'info',
                        style: {
                            marginTop: 10,
                            background: '#eee',
                            borderColor: '#aaa'
                        },
                        onDismiss: function onDismiss() {
                            return _this2.setState({ isOpen: false });
                        } },
                    _react2.default.createElement(
                        'pre',
                        { style: {
                                border: '0px solid black',
                                padding: 0,
                                margin: 0,
                                background: 'transparent'
                            } },
                        lines
                    )
                );
            } else {
                content = _react2.default.createElement(
                    'div',
                    { style: { textAlign: 'right', marginRight: 10 } },
                    _react2.default.createElement(
                        _Button2.default,
                        { bsStyle: 'link', onClick: function onClick() {
                                return _this2.setState({ isOpen: true });
                            } },
                        'Show Code'
                    )
                );
            }

            return content;
        }
    }]);

    return StyleguideSource;
}(_react2.default.Component), _class.propTypes = {
    lines: _react2.default.PropTypes.array
}, _temp2);