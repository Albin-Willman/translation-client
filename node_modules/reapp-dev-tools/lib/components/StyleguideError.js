'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StyleguideError = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Grid = require('react-bootstrap/lib/Grid');

var _Grid2 = _interopRequireDefault(_Grid);

var _Alert = require('react-bootstrap/lib/Alert');

var _Alert2 = _interopRequireDefault(_Alert);

var _StyleguideTitle = require('./StyleguideTitle');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StyleguideError = exports.StyleguideError = (_temp = _class = function (_React$Component) {
    _inherits(StyleguideError, _React$Component);

    function StyleguideError() {
        _classCallCheck(this, StyleguideError);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(StyleguideError).apply(this, arguments));
    }

    _createClass(StyleguideError, [{
        key: 'render',
        value: function render() {
            var _props = this.props;
            var error = _props.error;
            var title = _props.title;

            var message = error.message || error.toString();

            return _react2.default.createElement(
                _Grid2.default,
                null,
                _react2.default.createElement(_StyleguideTitle.StyleguideTitle, { title: title }),
                _react2.default.createElement(
                    _Alert2.default,
                    { bsStyle: 'danger' },
                    _react2.default.createElement(
                        'h4',
                        null,
                        'Ooooops!'
                    ),
                    _react2.default.createElement(
                        'p',
                        null,
                        message
                    )
                ),
                _react2.default.createElement(
                    'p',
                    null,
                    'In order to run the styleguide for ',
                    _react2.default.createElement(
                        'code',
                        null,
                        'ComponentName'
                    ),
                    ' you should run:'
                ),
                _react2.default.createElement(
                    'pre',
                    null,
                    'npm run guide ComponentName'
                )
            );
        }
    }]);

    return StyleguideError;
}(_react2.default.Component), _class.propTypes = {
    error: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.object, _react2.default.PropTypes.string, _react2.default.PropTypes.number]),
    title: _react2.default.PropTypes.string
}, _temp);